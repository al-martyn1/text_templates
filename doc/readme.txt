 Text Templates. (с) Александр Мартынов, 2005 год
 ----------------------------------------------------------

 Текстовые шаблоны - 
 плагин расширения файлового менеджера Far (с) Eugene Roshal

 В данном ПО используются исходные тексты Андрея Мартынова
 (для чтения конфигурационных xml файлов) - 
 http://www.rsdn.ru/article/xml/xmlcpp.xml
 
 Данное ПО поставляется "как есть". Автор не несет 
 ответственности за возможный убыток, прямо или косвенно связанный
 с использованием данного ПО.


 1. Системные требования 
 ------------------------

Для работы плагин TextTP требует
 1) Far версии не ниже 1.70 beta 5 (build 1634)
 1) Internet Explorer 4.0 или выше
 2) Динамическая библиотека msxml2


 2. Возможности
 ---------------

 Плагин позволяет упростить ввод повторяющихся фрагментов текста, 
с возможностью использования макроподстановок (параметров) в теле
шаблона (code snippets). 

 Дополнительные возможности плагина: 

 Коментирование кода  : Закоментировать выделенное 
                        Раскоментировать выделенное
                        Выделить закоментированное

 Управление отступами : Увеличить отступ
                        Уменьшить отступ
                        Увеличить отступ (1 пр)
                        Уменьшить отступ (1 пр)

 Выделение блоков    :  Выделить блок строк (вверх)
                        Выделить блок строк (вниз)
                        Выделить блок кода
                        Выделить блок кода и заголовок

 Прочее              :  Переместиться к началу выделения
                        Переместиться к концу выделения
                        Снять выделение

 При использовании .reg файлов, поставляемых в архиве, все возможности 
доступны "в одно нажатие".


 Текстовые шаблоны
 ------------------
 При использовании параметров в теле шаблона можно использовать
предопределенные имена параметров или задавать их произвольно. 
В последнем случае при обработке шаблона будет произведен запрос 
на ввод значений параметров с клавиатуры.
 При вставке шаблона позиция курсора после вставки определяется
символом '@' в теле шаблона (при необходимости вставки символа 
'@' его следует продублировать).

 Плагин может работать в двух основных режимах:
1) в режиме ввода имени шаблона в отдельном поле ввода; 
2) в режиме ввода имени шаблона в редактируемом файле с 
   последующей заменой имени шаблона на его тело.

 При вводе имени шаблона в поле ввода могут использоваться 
два режима:
1) режим немедленного завершения ввода и вставки шаблона, 
   если плагин может однозначно идентифицировать шаблон по 
   вводимому  имени  (по  начальным  символам);
2) режим автодополнения введенного текста, если плагин может
   однозначно идентифицировать шаблон по вводимому имени (по 
   начальным символам). В данном режиме для вставки тела шаблона 
   требуется подтвердить ввод нажатием клавиши [Enter].

 Плагин позволяет использовать пользовательские настройки для 
отдельных каталогов.


 Дополнительные возможности плагина
 -----------------------------------
 Коментирование кода
 --------------------
   Закоментировать выделенное     - закоментировать выделенный фрагмент кода
   Раскоментировать выделенное    - убрать коментарий с выделенного фрагмента
   Выделить закоментированное     - выделить закоментированный фрагмент кода

 Символы и строки, определяющие начало и  конец коментария, задаются для
каждого типа файлов отдельно.

 Управление отступами
 ---------------------
   Увеличить отступ               - уменьшает или увеличивает отступ 
   Уменьшить отступ                 выделенного блока или текущей строки

 При увеличении отступа используются настройки редактора - 
"Пробелы вместо табуляции" и "Размер табуляции". При уменьшении 
отступа происходит автоматическое определение типа отступа (tab или пробелы).

   Увеличить отступ (1 пр)        - уменьшает или увеличивает отступ 
   Уменьшить отступ (1 пр)          выделенного блока или текущей строки 
                                    на 1 пробел

 Выделение блоков
 -----------------
   Выделить блок строк (вверх)    - выделяет блок строк. Блок строк ограничен 
   Выделить блок строк (вниз)       сверху и снизу пустой строкой - строкой, 
                                    содержащей только пробельные символы или
                                    символы табуляции.

 Выделение блоков строк работает инкрементально в соответствующем направлении.
Если нет предыдущего выделения, то выделяется блок, в котором стоит курсор или
блок, расположенный не дальше, чем 3 строки от курсора в соответствующем 
направлении.

   Выделить блок кода             - выделяет блок кода
   Выделить блок кода и заголовок - выделяет блок кода и заголовок блока

 Выделение блоков кода производиться инкрементально - если какой-либо блок
уже выделен, то повторный вызов выделит объемлющий блок.



 3. Инсталляция
 --------------

 Для установки плагина следует:
1) разархивировать архив TextTP.rar в каталог 
   "Far\Plugins\Editor\TextTP" (допускается установка в другой 
   каталог, но следует изменит путь в .reg файлах, см. ниже).
2) Зарегистрировать клавиши быстрого доступа к функциям плагина 
   в меню плагинов редактора. Для этого следует запустить редактор 
   реестра  regedit.exe  и  произвести  импорт  файла
   "TextTP-menu-hk.reg" (меню "Реестр\Импорт файла реестра"). 
   При необходимости следует изменить путь к плагину и клавишу 
   быстрого доступа в меню плагинов редактора (по умолчанию 
   используются клавиши 't' и 'i').
3) Зарегистрировать макрокоманду для быстрого вызова функции code snippets. 
   Для этого следует импортировать файл реестра AltW-hotkey.reg. 
   При необходимости следует изменить путь к плагину и клавишу 
   вызова макрокоманды.
4) Зарегистрировать макрокоманды для вызова функции изменения 
   регистра символов, расположенных в файле CharCase.reg.
   Для корректной работы макросов необходим плагин "EditCase", 
   в меню плагинов (F11) ему должна быть назначена горячая клавиша 'c'.
5) Зарегистрировать макрокоманды для вызова функции коментирования кода,
   расположенных в файле comment.reg.
6) Перезапустить ф/м Far.
7) Проверить работоспособность плагина: создать файл с любым 
   расширением; вызвать плагин нажатием Alt-W (или другой 
   комбинации клавиш, зарегистрированной на предыдущем шаге); 
   в поле ввода ввести имя 'mtest' и убедиться, что произошла 
   вставка тела шаблона (данный шаблон вставляет текст с примерами 
   использования встроенных параметров шаблонов).

 Горячие клавиши:
 AltW-hotkey.reg
   Alt+W, Alt+Ц   - активация функции "code snippets"

 CharCase.reg
   Ctrl+Shift+U   - ВСЕ ПРОПИСНЫЕ
   Ctrl+U         - все строчные
   Ctrl+Alt+U     - Каждое Слово Начинается С Прописной Буквы.

 comment.reg
   Ctrl+C         - Закоментировать выделенное
   Ctrl+Shift+C   - Раскоментировать выделенное
   Alt+C          - Выделить закоментированное
   Ctrl+Z         - Увеличить отступ
   Ctrl+Shift+Z   - Уменьшить отступ
   Ctrl+X         - Увеличить отступ (1 пробел)
   Ctrl+Shift+X   - Уменьшить отступ (1 пробел)
   Ctrl+Alt+D     - Выделить блок строк (вверх)
   Alt+D          - Выделить блок строк (вниз)
   Ctrl+D         - Выделить блок кода
   Ctrl+Shift+D   - Выделить блок кода и заголовок


 4. Настройка и использование шаблонов
 --------------------------------------

 Конфигурация плагина хранится в файле texttp.xml, который 
расположен в одном каталоге с исполняемым модулем плагина. 
Дополнительные конфигурационные файлы подключаются тэгом 
<include>. Атрибут 'file' задает имя подключаемого файла. 
В приведенном ниже примере подключается конфигурационный 
файл c-shortcuts.xml.

    <include file="c-shortcuts.xml"/>

 Описания, сделанные последними, имеют приоритет 
(перезаписывают) аналогичные описания, сделанные ранее. 
Никаких предупреждений не выводится, поэтому следует быть 
внимательным при настройке плагина.


 Типы файлов
 -----------
 Все сокращенные последовательности ввода (далее шорткаты, 
от shortcut) применяются только для своего типа файлов, который 
указывается при описании шортката. Типы файлов, в свою очередь, 
описываются в секции <file-types>
тэгами <file-type>:

    <file-types>
        <file-type type="c-src"   extention=".c,.h"/>
        <file-type type="cpp-src" extention=".cpp,.cxx,.c++,.hpp"/>
        <file-type type="xml"     extention=".xml"/>
        <file-type type="html"    extention=".html,.htm"/>
    </file-types>

 Атрибут 'type' задает имя типа файлов, используемое в дальнейшем. 
В атрибуте 'extention' через запятую (',') перечисляются расширения
имени файла, используемые с данным типом (семейством типов) файлов.
Следует использовать точку ('.') перед символами расширения. Одиночная 
точка (без последующих символов) обозначает файл без расширения.
Не следует использовать одно и то же расширении в описании различных 
типов. В этом случае файл будет определен как принадлежащий к типу, 
описанному позже.
 В атрибуте 'extention' поддерживается задание маски имени файла.
Символ '*' обозначает любое число любых символов, символ '?' - однократное 
вхождение любого символа. Символ '*' можно использовать как в конце, так 
и в середине маски (последняя ситуация не тестировалась исчерпывающе и может 
содержать ошибки в реализации). Ниже приведено несколько тестовых случаев,
на которых проверялась корректность сравнения по маске:

+ .c*p equals to .cxxp
+ .in*mat* equals to .information
+ .in*mat* equals to .inmat
- .in*mat* not equal to .infwat
+ .in*?at* equals to .infwat
- .cpp not equal to .cxx
- .c?? not equal to .hpp
+ .c?? equals to .cpp
+ .c?? equals to .cxx
- .c* not equal to .hpp
+ .c* equals to .cpp
+ .c* equals to .cxx
+ .c* equals to .c


 Шаблоны
 -------
 Шаблоны могут быть как описаны в конфигурационном файле, так и 
содержаться в отдельных файлах. Описания шаблонов в конфигурационном 
файле содержаться в секции <templates>:

<templates>
<template name="c-comment">/* @ */</template>
<template name="cpp-comment">// @ </template>
<template name="cpp-separator-line">
//-----------------------------------------------------------------------------
</template>
<template name="c-separator-line"  >
/*---------------------------------------------------------------------------*/
</template>
</templates>

 Атрибут 'name' используется для последующих ссылок на тело шаблона.
Следует быть внимательным при именовании шаблонов, и не допускать
одинаковых имен. В этом случае будет использоваться последнее 
определение шаблона. Это может использоваться для переопределения 
отдельных шаблонов из стандартной конфигурации и настройке их под 
конкретные нужды без модификации оригинальных конфигурационных файлов.
 Символ '@' в теле шаблона задает позицию, на которую будет установлен 
курсор после вставки шаблона. Курсор  будет  установлен  на  позицию 
первого встреченного символа '@'. Для вставки данного символа в текст 
его следует продублировать.
 В описании тела шаблона начальные и завершающие пробельные символы, 
а также переводы строк, игнорируются, согласно правилам xml. Для 
сохранения разметки следует использовать секции CDATA в описании 
тела шаблона.


 Шорткаты
 --------
 Шорткаты описываются тэгами <shortcuts> в секции </shortcuts>:

<shortcuts>
    <shortcut name="//"          file-type="c-src"         template="c-comment"/>
    <shortcut name="//"          file-type="cpp-src"       template="cpp-comment"/>
    <shortcut name="/*"          file-type="c-src,cpp-src" template="c-comment"/>
    <shortcut name="cseparator"  file-type="c-src,cpp-src" template="c-separator-line"/>
    <shortcut name="xseparator"  file-type="c-src,cpp-src" template="cpp-separator-line"/>
    <shortcut name="separator"   file-type="c-src"         template="c-separator-line"/>
    <shortcut name="separator"   file-type="cpp-src"       template="cpp-separator-line"/>
</shortcuts>

 Тип файлов, к которым применяется шорткат, задается атрибутом 
'file-type'. Может быть задано несколько типов файлов, к которым применим
данный шорткат, имена типов файлов разделяются запятыми.
 В примере выше реализовано следующее:
    для файла .cpp ввод // вставит //
    для файла .c   ввод // вставит /*  */
    для файла .cpp ввод separator вставит //------------------
    для файла .c   ввод separator вставит /*----------------*/
    ввод cseparator для файлов .c и .cpp вставит /*----------------*/
    ввод xseparator для файлов .c и .cpp вставит //------------------

 Атрибутом 'name' задается имя шортката (которое и 
вводится с клавиатуры). Разные шорткаты могут иметь одинаковые 
имена, но разные типы файлов. В этом случае конфликта не возникает. 
 Атрибут 'template' задает используемый шаблон. Префикс [file:] 
указывает, что тело шаблона находится в файле (поиск файла будет 
производится в подкаталоге templates каталога плагина). 
 Необязательный атрибут 'keep-indent' определяет, будет ли весь 
вставляемый блок (если шаблон многострочный) отстоять от начала 
строки или все вставленные строки, кроме первой, будут начинаться 
сначала строки.
 Атрибуты 'line-before' и 'line-after' указывают, следует ли вставить
пустую строку до и после тела шаблона соответственно. При использовании 
CDATA или внешних файлов можно обойтись без их использования.


 Стандартные шорткаты
 --------------------
 В настоящее время определены и поставляются вместе с плагином 
следующие наборы шорткатов:
  шорткаты для подключения стандартных заголовочных файлов (C/C++)
    stl/crt
    windows sdk
    atl/wtl

 Шорткаты для подключения заголовков вставляют такой текст:

#if !defined(_WINDOWS_)
    #include <windows.h>
#endif

 Имена inсlude-шорткатов начинаются с i и продолжаются именем 
подключаемого файла (приведенный выше текст вставляется шорткатом 
с именем iwindows.h)
 Исключения составляют файлы STL/CRT. Для них вторым символом имени 
является символ 'h'. Это сделано, чтобы отличать шорткаты STL от CRT. 
Например:

    istring   - вставляет #include <string>
    ihstring  - вставляет #include <string.h>

 Подобные правила могут быть использованы и с другими заголовочными 
файлами, при почти полном совпадении их имен (как windows.h и 
windowsx.h - для последнего используется шорткат ixwindowsx.h)

 В шаблонах STL/CRT используются имена "стражей включения" из файлов 
MSVC, Borland C++ Builder (old/new stl), GCC 3.2 и GCC 3.4.

 Для получения актуальной информации о наборе шорткатов, поставляемых
с данным ПО, следует изучить конфигурационные файлы.


 Коментирование кода
 --------------------
 Для коментирования кода используются настройки секции <comment-sequences>:
(в стандартной конфигурации описания коментариев помещены в файл 'comments.xml')

<comment-sequences>
    <comment file-type="c-src,cpp-src"
             comment-type="stream"
             begin-sequence="/*"
             end-sequence="*/"
             indent="1">
    </comment>

    <comment file-type="c-src"
             comment-type="lines"
             begin-sequence="/*"
             end-sequence="*/"
             sequence="*"
             indent="1"
             end-at-new-line="true"
             new-line-indent-before="1">
    </comment>

    <comment file-type="cpp-src"
             comment-type="lines"
             sequence="//"
             indent="1">
    </comment>

</comment-sequences>

 Для каждого типа файлов параметры коментирования описываются тэгом <comment>.
Различаются способы коментирования stream - коментарии может начинаться и 
заканчиваться в любом месте строки, и lines - могут быть закоментированны 
только строки целиком - символы коментария вставляются в начале строки.
 Обязательный атрибут 'file-type' задает список типов файлов, к которым 
применяются правила коментирования.
 Обязательный атрибут 'comment-type' определяет тип коментария - коментируются
строки целиком или произвольный фрагмент кода. Допустимые значения - 'stream' 
и 'lines'. Для каждого типа файлов может быть отдельно заданы оба типа 
коментария.
 Атрибут 'sequence' - задает строку коментария для коментирования строки 
целиком или дополнительный символ, помещаемый перед каждой строкой (кроме 
первой и последней) блока строк.
 Атрибуты 'begin-sequence' и 'end-sequence' - задают начало и конец 
произвольного коментария. Если одно из значений не задано, оно берется из 
противоположного.
 Атрибут 'indent' - количество пробелов, помещаемое после начала коментария и 
перед его концом, а также после символов 'sequence'.
 Атрибут 'end-at-new-line' - если произвольный коментарий используется для
коментирования блока строк, то конец коментария может помещаться либо в конце
последней строки, либо в начале новой строки, следующей за последней строкой 
фрагмента кода. Допустимые значения 'true'и 'false'. Игнорируется, если
не заданы 'begin-sequence' и 'end-sequence'.
 Атрибут 'new-line-indent-before' - отступ перед символами 'sequence' в 
середине блока строк и отступ перед последней строкой коментария, которая 
добавляется в конце блока строк (см. 'end-at-new-line').
 Если в языке нет способа закоментировать однц строку до конца, будут 
использоваться значения 'begin-sequence' и 'end-sequence' для произвольного
коментария (stream). При этом лучше задавать значение 'sequence' - оно
будет помещаться в начале каждой строки (для произвольного коментирования оно 
не используется). Это позволит визуально выделить коментарий (коментарии будут 
хорошо заметны и в редакторе без подсветки синтаксиса), а также упрощает 
определение границ коментария при автоматическом выделении (функция "Выделить 
закоментированное").


 Примеры действия функции автокоментирования (на основе вышеприведенной 
конфигурации для файлов c-src и cpp-src):
 stream.cpp (также и .c)
 if (i<3)
    { /*IАвтоматичеки сформированный 
         произвольный коментарийI*/
     doSomething();
    }
 I - Пробелы, количество задается атрибутом 'indent'

 lines1.c (при end-at-new-line="true")
/*IАвтоматичеки 
N*Iсформированный 
N*Iкоментарий
N*Iдля блока строк
N*/
 I - Пробелы, количество задается атрибутом 'indent'
 N - Пробелы, количество задается атрибутом 'new-line-indent-before'

 lines2.c (при end-at-new-line="false")
/*IАвтоматичеки 
N*Iсформированный 
N*Iкоментарий
N*Iдля блока строкI*/
 I - Пробелы, количество задается атрибутом 'indent'
 N - Пробелы, количество задается атрибутом 'new-line-indent-before'

 lines3.c (при sequence="" и end-at-new-line="true")
/*IАвтоматичеки 
LLIсформированный 
LLIкоментарий
LLIдля блока строк
N*/
 I - Пробелы, количество задается атрибутом 'indent'
 N - Пробелы, количество задается атрибутом 'new-line-indent-before'
 L - Пробелы, количество определяется длинной строки 'begin-sequence' (/* - 2)

 lines.cpp
//IАвтоматичеки 
//Iсформированный 
//Iкоментарий
//Iдля блока строк
 I - Пробелы, количество задается атрибутом 'indent'


 Выделение блоков
 -----------------
 Для коментирования кода используются настройки секции <block-selections>:
(в стандартной конфигурации описания коментариев помещены в файл 'blocksel.xml')

<block-selections>
    <selection file-type="c-src,cpp-src" case-sensitive="true">
        <block begin="{" end="}"/>
        <block begin="/*" end="*/"/>
    </selection>

    <selection file-type="pas-src" case-sensitive="false">
        <block begin="Begin" end="End"/>
        <!--block begin="/*" end="*/"/-->
    </selection>
</block-selections>

 Для каждого типа файлов параметры блоков описываются тэгом <selection>.
Обязательный атрибут 'file-type' задает список типов файлов, к которым 
применяются правила коментирования.
 Атрибут 'case-sensitive' определяет чувствительность к регистру символов 
в начале и конце блока. Допустимые значения 'true'и 'false'. 
Значение по умолчанию 'true'.

 Список ограничителей блоков задается набором тэгов <block>
Для каждого блока обязательно задается подстрока начала блока и конца
(обязательные атрибуты 'begin' и 'end').
Совпадение строки текста с началом или концом блока происходит, если строка
содержит в начале соответствующую подстроку (пробельные сиволы в начале игнорируются).


 /* Это строка, начинающая блок
    Данная строка НЕ заканчивает блок */
 // для корректной работы форматируйте код, 
 // перенося соответствующие символы на отдельные строки */



 if (i<3)
    { // начало блока, ограничитель - {
     doSomething();
    } // конец блока, ограничитель - }


 Заголовок блока - текст, расположенный перед блоком. Заголовок блока 
ограничивается пустой строкой, или одним из ограничителей блока.

 someCode(); // не имеет отношения к блоку ниже

 if (i<3) // заголовок блока
    { // начало блока, ограничитель - {
     doSomething();
    } // конец блока, ограничитель - }

 // Два вложенных блока
 someCode(); // относиться к объемлющему блоку (оператор цикла)
 for(int i=0; i<7; ++i) // не имеет отношения к блоку ниже
    { // ограничивает блок if сверху
     if (i<3) // заголовок блока if
        { // начало блока, ограничитель - {
         doSomething();
        } // конец блока, ограничитель - }
    }




 5. Пользовательские настройки для отдельных каталогов
 ------------------------------------------------------

 Плагин позволяет использовать индивидуальные настройки для отдельных
каталогов. Для того, чтобы использовать индивидуальные настройки
для каталога, в него следует поместить файл с именем 
'texttp-custom-info.xml' следующего содержания:

<?xml version="1.0"?>
<texttp-custom-info>
    <config-file>c:\SRC\Far\texttp\ttp\ttp-project-templates.xml</config-file>
    <template-dir>c:\SRC\Far\texttp\ttp\templates</template-dir>
</texttp-custom-info>

В тэге 'config-file' задается имя дополнительного конфигурационного 
файла. В тэге 'template-dir' задается имя каталога, в котором будет 
производится поиск файлов с текстами шаблонов (если файл не будет 
найден в указанном каталоге, его поиск продолжится в основном каталоге
шаблонов - 'Far\Plugins\Editor\TextTP\Templates'). Содержимое  
конфигурационных файлов описано в п.4.
 Поиск файла 'texttp-custom-info.xml' производиться сначала в том же
каталоге, где находится и редактируемый файл, затем во всех каталогах 
выше, вплоть до корневого каталога. Поиск прекращается, когда файл
найден в одном из этих каталогов.



 6. Обратная связь
 ------------------

 Пожелания и предложения направляйте по адресу texttp@mail.ru.


 Желаю приятной работы.
                              
                              С уважением, Александр Мартынов.




