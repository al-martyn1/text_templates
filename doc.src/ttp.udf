%if defined(TDCK)
%define GOST
%endif TDCK

%define NO_GOST_FRAMES
% define NO_GOST_TITLE_FRAME
% define NO_GOST_CONTENT_FRAME
% define NO_GOST_PAGE_FRAME
% define NO_TITLE_COLONTITLE

%include <stddef>
%include <title>
%include <toc>

% define XML2UDF perl.exe /usr/bin/xml2udf.pl
%define XML2UDF perl.exe f:/usr/bin/xml2udf.pl
%define CC2X cc2x.exe

@newcommand[cellleftalign][@renewcommand[cell_para_style][left]]


@var[hlpmaxsectionlevel][-2]
@inputenc[cp1251]
% @newcommand[tag][@hindex[Тэг][#1]@texttt[#1]]
@newcommand[cmd][@texttt[#1]]

@newcommand[tag][@hindex[Тэг][#1]@lt[]@textbf[#1]@gt[]]
@newcommand[entryitemtag][@entryitem[#1][#2]@hindex[Тэг][#2]]
@newcommand[attr][@hindex[Атрибут][#1]@textbf[#1]]
@newcommand[tagattr][@hindex[Тэг][#1]@hindex[#1][#2]@textbf[#2]]
% @newcommand[entryitemtagattr][@entryitem[#1][#3]@hindex[Тэг][#2]@hindex[#2][#3]]
@newcommand[entryitemtagattr][@entryitem[#1_#2_#3][#3]@hindex[#2][#3]]
@newcommand[file][@hindex[Файл][#1]@quoted[#1]]
@newcommand[fileincap][@quoted[#1]]
@newcommand[path][@quoted[#1]]
@newcommand[ttp][@textbf[Text Templates]]
@newcommand[formatter][@hindex[Плагин 3его уровня][#1]@textbf[#1]]

@newcommand[hidxident][@ifthenelse[#0>1][@ident[#1]@hindex[#2][#1]][@ident[#1]@hindex[#1]]]
@newcommand[idxident][@ifthenelse[#0>1][@ident[#1]@index[#2][#1]][@ident[#1]@index[#1]]]



% if !defined(HELP)
@title[Text Templates]
@subtitle[(Текстовые шаблоны)]
@subsubtitle[плагин к файловому менеджеру Far]
@year[2007]
@author[Александр Мартынов]
% endif

@begin[article]

%if !defined(HELP)
@maketitle[]
@makecontents[]
%endif

%if !defined(HELP)
@section*[SEC_BLAG][Благодарности]
%else
@section[SEC_BLAG][Благодарности]
%endif
Большое спасибо всем, кто нашел в себе силы скачать и посмотреть данное творение. 
Огромное спасибо всем, кто нашел в себе силы высказать свои замечания по работе плагина.
Отдельное спасибо участникам форумов forum.farmanager.com - alexfh, t-rex; 
форумов rsdn.ru - Lazy Cjow Rhrr, Mika Soukhov, Andir.
Спасибо также всем тем, кто присылал свои замечания по электронной почте.


%if !defined(HELP)
@section*[SEC_3DP_SRC][Использованные сторонние разработки]
%else
@section[SEC_3DP_SRC][Использованные сторонние разработки]
%endif
В данном ПО используются исходные тексты Андрея Мартынова
для сериализации/десериализации xml файлов в структуры C++ - 
подробное описание можно найти по адресу: @webref[http://www.rsdn.ru/article/xml/xmlcpp.xml].


%if !defined(HELP)
@section*[SEC_SYSTEM_REQUIREMENTS][Требования к программному окружению]
%else
@section[SEC_SYSTEM_REQUIREMENTS][Требования к программному окружению]
%endif
Для работы плагин TextTP требует:
@begin[enumerate]
@item[]Far версии не ниже 1.70 beta 5 (build 1634);
@item[]Internet Explorer 4.0 или выше;
@item[]Динамическая библиотека msxml2;
@end[enumerate]



% @secnotext[]
@section[SEC_FEATURES][Возможности плагина]
Плагин добавляет к редактору файлового менеджера Far возможности по быстрой вставке шаблонов,
возможности по комментированию кода и управления блоками, и возможности по форматированию 
фрагментов текста и кода. Все возможности настраиваются отдельно для каждого типа файлов.

@para[]Плагин позволяет управлять преобразованием символов табуляции (и другими параметрами работы редактора) в 
последовательности пробелов для каждого типа файлов.
@para[]Плагин умеет отслеживать модификацию редактируемых файлов и при необходимости 
переоткрывает их в редакторе (возможность автоматического подтверждения переоткрытия может настраиваться).


@subsection[SUBSEC_FEATURE_TEXT_TEMPLATES][Вставка шаблонов]
Плагин позволяет упростить ввод повторяющихся фрагментов текста, 
с возможностью использования макроподстановок (параметров) в теле
шаблона (code snippets). Шаблоны могут задаваться как в конфигурационном xml-файле,
так и могут находится в отдельных файлах. Для вызова шаблона задается шорткат, который
может быть задан для каждого типа файла отдельно. Вызов вставки шаблона осуществляется
из меню плагинов, доступного в редакторе по клавише F11 - @dquoted[Текстовые шаблоны].
В зависимости от режима работы имя шортката может быть введено непосредственно в тексте 
и после вызова плагина заменено на текст шаблона; при использовании второго способа
в позиции курсора появляется поле ввода, в котором следует ввести имя шортката. Ввод завершается 
(в зависимости от режима работы) либо нажатием клавиши Enter, либо автоматически. Для удобства
работы вызов плагина может быть назначен на клавиатурный макрос, в поставку помещен .reg файл, 
регистрирующий горячую клавишу Alt-W.


@subsection[SUBSEC_FEATURE_COMMENTING_CODE][Комментирование кода и работа с блоками текста]
Плагин предоставляет следующие возможности по комментированию кода и работе с блоками текста:



@newcommand[featureGroup][\
@cellleftalign[]@begin[tbl_cell][75mm]#1@end[tbl_cell]\
]

@newcommand[feature][\
@cellleftalign[]@begin[tbl_cell][85mm]#1@end[tbl_cell]\
]

@begin[tabular][][0][none]
@begin[tbl_row]@featureGroup[Комментирование кода]@feature[Закомментировать выделенное]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Раскомментировать выделенное]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Выделить закомментированное]@end[tbl_row]
@begin[tbl_row]@featureGroup[Управление отступами]@feature[Увеличить отступ]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Уменьшить отступ]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Увеличить отступ (1 пр)]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Уменьшить отступ (1 пр)]@end[tbl_row]
@begin[tbl_row]@featureGroup[Выделение блоков]@feature[Выделить блок строк (вверх)]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Выделить блок строк (вниз)]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Выделить блок кода]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Выделить блок кода и заголовок]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Инкрементное выделение]@end[tbl_row]
@begin[tbl_row]@featureGroup[Прочее]@feature[Переместиться к началу выделения]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Переместиться к концу выделения]@end[tbl_row]
@begin[tbl_row]@featureGroup[]@feature[Снять выделение]@end[tbl_row]
% @begin[tbl_row]@featureGroup[Форматирование текста]@feature[Форматирование выделенного текста при помощи подключаемых модулей (плагинов) форматирования и внешних программ]@end[tbl_row]
% @begin[tbl_row]@featureGroup[]@feature[]@end[tbl_row]
@end[tabular]

@para[]\
Блоками текста считаются фрагменты текста, разделенные пустой строкой. Блоками кода считаются
фрагменты кода, ограниченные @dquoted[операторными скобками]. Заголовком, относящимся к блоку кода, 
считается код, расположенный выше блока до первой пустой строки.


@subsection[SUBSEC_FEATURE_FORMATING_CODE][Форматирование блоков текста/кода]
Функция форматирования блоков текста/кода позволяет передать выделенный текст во внешний 
модуль форматирования (плагин третьего уровня), и замещает выделенный текст на текст, который
возвращает модуль форматирования. Стили форматирования задаются для каждого типа файлов 
отдельно, список доступных стилей доступен в меню внешних модулей редактора Far - 
F11/Форматирование текста.
@para[]\
В поставку включены два модуля форматирования текста - модуль форматирования 
простого текста (@formatter[simple-text-format] в @file[text-fmt.dll]) и модуль для вызова внешних программ
(@formatter[external-formatter] в @file[ext-fmt.dll]).
@para[]\
В поставку включена утилита AStyle, форматирующая код на языках C/C++/C@hash[]/Java,
для языков C/C++ предопределены стили форматирования.
@para[]\
В поставку включены заголовочные файлы для написания плагинов третьего уровня, и
исходные тексты модулей @formatter[simple-text-format] и @formatter[external-formatter].


@subsection[SUBSEC_FEATURE_EDITOR_SETTING][Индивидуальные настройки редактора]
Плагин позволяет использовать для разных типов файлов различные настройки редактора.
В текущей версии реализована поддержка индивидуальных настроек для параметров: пробелы вместо табуляции,
размер табуляции, автоотступ, курсор за пределами строки. В дальнейшем список настраиваемых параметров 
будет расширяться. Конфигурирование настроек редактора описано в разделе @ref[SUBSEC_TABULATION].

@para[]@begin[note]Для корректной работы данной функции следует отключить глобальную настройку редактора 
@dquoted[Пробелы вместо табуляции] (@dquoted[Expand tabs to spaces]) и пользоваться для настройки возможностями данного плагина.
Это связано с тем, что редактор при открытии файла атоматически преобразовывает символы табуляции в пробелы до того, как 
плагин устанавливает индивидуальные настройки для редактируемого файла.@end[note]

@para[]@begin[warning]Данная возможность плагина может конфликтовать с возможностями, предоставляемыми плагином 
ESC. Существует возможность отключить данную функциональность в меню конфигурации плагина.@end[warning]


@subsection[SUBSEC_FEATURE_EDOTOR_RELOADING][Слежение за временем модификации файла]
Плагин позволяет отслеживать время последней записи в редактируемый файл. При изменении файла внешней программой 
он переокрывает файл в редакторе. Также существует возможность автоматического открытия (без вывода диалога о 
подтверждении переоткрытия файла).



% @secnotext[]
@section[SEC_DIFF_OTHER_PLUGINS][Отличия от аналогов]
Существует большое количество плагинов к Far, которые вместе или по отдельности выполняют аналогичные функции. 
Основными достоинствами данного плагина по сравнению 
с другими является то, что в данном плагине большинство полезных функции собрано вместе,
что позволяет отказаться от изучения и использования нескольких отдельных плагинов.


@subsection[SEC_DIFF_TRUE_TEMPLATE][Отличия от True Template]
Данный плагин предоставляет возможность вставки произвольных шаблонов, задаваемых
и настраиваемых в конфигурационных файлах. Данная функция присутствует также в плагине 
TrueTеmplate.
Основные отличия в реализации данной функции от ее реализации в TrueTеmplate:
@begin[enumerate]
@item[]Явная активация функции вставки шаблона через меню плагинов (или через назначенный клавиатурный макрос).
В плагине TrueTеmplate вставка шаблонов настраивается при помощи достаточно сложных правил, основанных 
на регулярных выражениях, плагин TrueTеmplate на основании этих правил анализирует текст и вставляет шаблон.
При использовании плагина TrueTеmplate ввод текста иногда может приводить к мало непредсказуемым и 
неожиданным результатам.
@item[]Отсутствие сложных правил для вставки шаблонов. Для добавления нового шаблона следует задать только тело шаблона
и клавиатурный шорткат для его вызова. Нет необходимости составлять регулярное выражение, на основании которого будет 
производится вставка.
@item[]Простота синтаксиса шаблонов. Шаблоны задаются простым текстом, поддерживается только простая возможность
вставки дополнительно вводимых с клавиатуры (или предопределенных) имен.
@end[enumerate]



@subsection[SEC_DIFF_EXTERNAL_FILTER][Отличия от External Filter]
Плагин External Filter может использоваться для форматирования кода/текста 
с использованием внешней программы, которая получает в поток
stdin содержимое выделенного блока, и выдает результат, который заменяет содержимое выделенного блока,
в stdout. Достоинство метода - универсальность. Недостаток -
требуется каждый раз вводить команду, которая может быть длинной и
трудно запоминаемой.

@para[]\
Плагин Text Templates предоставляет более специализированные средства для форматирования
текста и кода. Для каждого типа файла можно задать набор стилей форматирования и указать дополнительный модуль
(плагин третьего уровня), 
который будет осуществлять форматирование. Доступен модуль, который производит форматирование 
с использованием внешних программ аналогично действию плагина External Filter. Все используемые 
стили и способы форматирования можно описать в конфигурационном файле и вызывать по заданному имени через меню 
плагинов в редакторе.


@subsection[SEC_DIFF_ESC][Отличия от ESC]
Данный плагин реализует часть возможностей плагина ESC (различные настройки редактора для разных типов файлов).
Плагин ESC богаче по возможностям, но многие из них часто не нужны. Какой из плагинов использовать - личное дело каждого, 
я придерживаюсь принципа @dquoted[все в одном флаконе] с возможностью отключения, поэтому часть функциональности 
ESC воспроизведена в данном плагине.




@subsection[SEC_DIFF_2][Прочие возможности]
Некоторые из остальных предоставляемых плагином возможностей доступны и в других плагинах. Так, например
плагин Colorer позволяет производить выделение блоков кода. Данная возможность реализована в плагине Colorer
более универсально, но в нем отсутствует возможность выделять блок кода и @dquoted[заголовок] - код, расположенный 
выше блока до первой пустой строки. Также в плагине Text Templates производится инкрементное выделение - с 
каждым вызовом функции выделения выделенная область увеличивается. В сторонних плагинах нет также 
функции инкрементного выделения по строке - код разбивается на блоки и производится последовательное 
увеличение выделения по этим блокам. Также не попадался на глаза плагин, который бы позволял закомментировать и 
раскомментировать выделенный блок кода, выделить закомментированный фрагамент.
@para[]
Использование плагина Text Templates не подразумевает полный отказ от других плагинов, при желании
лучше использовать наиболее удобные способы для каждой конкретной ситуации.

% Наличие данных функций в плагине Text Templates позволяет пользоваться различными с

% @subsection[SEC_DIFF_3][Отличия от 3]


@secnotext[]
@section[SEC_USAGE][Использование плагина]

@subsection[SEC_USAGE_REOPEN_BLOCK][Слежение за модификацией редактируемого файла и переоткрытие файла]
Плагин добавляет в редактор возможность перезагрузки файла в редактор по клавиатурному сочетанию Alt+F2.
Подсказка для клавиши F2 появляется в строке статуса редактора при нажатии клавиши Alt.
@para[]Дополнительно плагин может следить за датой/временем последней записи в файл и предлагает
перезагрузить файл в редактор, если он был изменен внешней программой. В этом случае может 
появляться диалог подтверждения переоткрытия файла (данная возможность может отключаться в настройках 
плагина и файл может перезагружаться в редактор без запросов).



@subsection[SEC_USAGE_SELECT_STRING_BLOCK][Выделение блока строк]
Данная функция доступна из меню плагинов редактора - F11/@dquoted[Коментирование кода].
@para[]
Блоком текста является фрагмент текста, отделенный от остального пустыми строками.
@para[]
Пример действия функции @dquoted[Выделить блок строк] приведен на рисунке @ref[PIC_USAGE_SELECT_STRING_BLOCK].
На нем приведено действие последовательности следующих команд: @dquoted[Выделить блок строк (вниз)],
@dquoted[Выделить блок строк (вниз)] и @dquoted[Выделить блок строк (вверх)].

%if defined(HELP)
% @renewcommand[picture][@_rtf_bml[#1][#2][#3]]
%endif

@begin[picture][PIC_USAGE_SELECT_STRING_BLOCK][Иллюстрация действия функции @dquoted[Выделить блок строк]]
@picture[selBlock0][65]
@picture[selBlock1][65]
@picture[selBlock2][65]
@picture[selBlock3][65]
@end[picture]


@subsection[SEC_USAGE_SELECT_CODE_BLOCK][Выделение блока кода]
Данная функция доступна из меню плагинов редактора - F11/@dquoted[Коментирование кода].
@para[]
Блоками кода считаются
фрагменты кода, ограниченные @dquoted[операторными скобками].
@dquoted[Операторные скобки] задаются для каждого типа файла отдельно. Началом блока считается строка, 
первым(и) непробельным(и) на которой являются символы начала @dquoted[операторной скобки]. Концом блока 
является строка, первым(и) непробельным(и) на которой являются символы конца @dquoted[операторной скобки].
Данная функция не будет корректно работать со стилями форматирования кода, когда операторная скобка 
располагается не в начале строки - такими стилями являются стили @dquoted[Linux] и 
@dquoted[Kernighan and Ritchie] для языка C++ (см. раздел @ref[SEC_USAGE_FORMATTING_CODE]).

@para[]
Пример действия функции @dquoted[Выделить блок кода] приведен на рисунке @ref[PIC_USAGE_SELECT_CODE_BLOCK].
Приведенная иллюстрация демонстрирует двукратное последовательное действие данной функции.

%if defined(HELP)
% @renewcommand[picture][@_rtf_bml[#1][#2][#3]]
%endif

@begin[picture][PIC_USAGE_SELECT_CODE_BLOCK][Иллюстрация действия функции @dquoted[Выделить блок кода]]
@picture[selCodeB0][65]
@picture[selCodeB1][65]
@picture[selCodeB2][65]
@end[picture]


@subsection[SEC_USAGE_SELECT_CODE_BLOCK_AND_HEADER][Выделение блока кода и заголовка]
Данная функция доступна из меню плагинов редактора - F11/@dquoted[Коментирование кода].
@para[]
Блоками кода считаются
фрагменты кода, ограниченные @dquoted[операторными скобками]. Заголовком, относящимся к блоку кода, 
считается код, расположенный выше блока до первой пустой строки.
@para[]
Пример действия функции @dquoted[Выделить блок кода и заголовок] приведен на рисунке @ref[PIC_USAGE_SELECT_CODE_BLOCK_AND_HEADER].
Приведенная иллюстрация демонстрирует двукратное последовательное действие данной функции.

%if defined(HELP)
% @renewcommand[picture][@_rtf_bml[#1][#2][#3]]
%endif

@begin[picture][PIC_USAGE_SELECT_CODE_BLOCK_AND_HEADER][Иллюстрация действия функции @dquoted[Выделить блок кода и заголовок]]
@picture[selWithH0][75]
@picture[selWithH1][75]
@picture[selWithH2][75]
@end[picture]



% @begin[tbl_row]@featureGroup[Выделение блоков]@feature[Выделить блок строк (вверх)]@end[tbl_row]
% @begin[tbl_row]@featureGroup[]@feature[Выделить блок строк (вниз)]@end[tbl_row]
% @begin[tbl_row]@featureGroup[]@feature[Выделить блок кода]@end[tbl_row]
% @begin[tbl_row]@featureGroup[]@feature[Выделить блок кода и заголовок]@end[tbl_row]


@subsection[SEC_USAGE_INCREMENTAL_SELECTION][Инкрементное выделение в строке]
Данная функция доступна из меню плагинов редактора - F11/@dquoted[Коментирование кода].
@para[]
Инкрементное выделение в строке работает следующим образом: строка разбивается на фрагменты,
разделенные стоп-последовательностями (типа @quoted[.], @quoted[,], @quoted[-@gt[]], @quoted[;] и тп, 
задаются для каждого типа файла отдельно), также выделяются блоки, ограниченные парными стоп-символами
(например  @quoted[(] и  @quoted[)], также настраивается). Выделение происходит сначала вправо внутри самого 
вложенного блока, затем влево, затем выделяется охватывающий блок, и так происходит, пока не будет выделена вся строка.
Снимки экрана на рисунке @ref[PIC_USAGE_INCREMENTAL_SELECTION] демонстрируют поведение данной функции.

%if defined(HELP)
% @renewcommand[picture][@_rtf_bml[#1][#2][#3]]
%endif

@begin[picture][PIC_USAGE_INCREMENTAL_SELECTION][Иллюстрация действия функции @dquoted[Инкрементальное выделение]]
@picture[incs200][65]
@picture[incs201][65]
@picture[incs202][65]
@picture[incs203][65]
@picture[incs204][65]
@picture[incs205][65]
@picture[incs206][65]
@picture[incs207][65]
@picture[incs208][65]
@picture[incs209][65]
@picture[incs210][65]
@picture[incs211][65]
@end[picture]







@subsection[SEC_USAGE_COMMENTING_CODE][Комментирование кода]
Данная функция доступна из меню плагинов редактора - F11/@dquoted[Коментирование кода].
@para[]
Функция комментирования кода позволяет закомментировать произвольно выделенный фрагмент кода,
выделенный вертикальный блок, или выделенный блок строк. Примеры использования функции
@dquoted[Комментирование кода] для языка C++ приведены на рисунке @ref[PIC_COMMENTING_CODE].
В зависимости от типа файла для него могут использоваться разные способы комментирования. Так, для 
пакетных .bat файлов поддерживается только комментирование строк целиком вне зависимости от типа выделения
(см. рисунок @ref[PIC_COMMENTING_CODE_BAT]).

%if defined(HELP)
% @renewcommand[picture][@_rtf_bml[#1][#2][#3]]
%endif

@begin[picture][PIC_COMMENTING_CODE][Иллюстрация действия функции @dquoted[Комментирование кода]]
@picture[rem0][65]
@picture[rem1][65]
@picture[rem2][65]
@picture[rem3][65]
@end[picture]

@begin[picture][PIC_COMMENTING_CODE_BAT][Действие функции @dquoted[Комментирование кода] для .bat файлов]
@picture[rem4][65]
@picture[rem5][65]
@end[picture]





@subsection[SEC_USAGE_FORMATTING_TEXT][Форматирование текста]
Данная функция доступна из меню плагинов редактора - F11/@dquoted[Форматирование текста].
При выборе этого пункта раскрывается меню со списком доступных стилей форматирования для редактируемого файла.
@para[]
Для форматирования текста используется плагин третьего уровня @formatter[simple-text-format].
В поставляемых конфигурационных файлах предустановленны следующие стили для форматирования простого текста:

@newcommand[styleName][@cellleftalign[]@begin[tbl_cell][50mm]#1@end[tbl_cell]]

@begin[tabular][][0][none]

@begin[tbl_row]@styleName[Left]
@cellleftalign[]@begin[tbl_cell][120mm]
Текст выровнен по левой границе. Отступ первой строки - 2 символа.
@end[tbl_cell]@end[tbl_row]

@begin[tbl_row]@styleName[Right]
@cellleftalign[]@begin[tbl_cell][120mm]
Текст выровнен по правой границе. Отступа первой строки нет.
@end[tbl_cell]@end[tbl_row]


@begin[tbl_row]@styleName[Center]
@cellleftalign[]@begin[tbl_cell][120mm]
Текст выровнен по центру. Отступа первой строки нет.
@end[tbl_cell]@end[tbl_row]


@begin[tbl_row]@styleName[Width]
@cellleftalign[]@begin[tbl_cell][120mm]
Текст выровнен по ширине. Отступ первой строки - 2 символа.
@end[tbl_cell]@end[tbl_row]


@begin[tbl_row]@styleName[Left (Enumeration)]
@cellleftalign[]@begin[tbl_cell][120mm]
Текст выровнен по левому краю. Отступа первой строки нет, 
отступ последующих 3 символа.
@end[tbl_cell]@end[tbl_row]


@begin[tbl_row]@styleName[Left (No para indent)]
@cellleftalign[]@begin[tbl_cell][120mm]
Текст выровнен по левому краю. Отступов нет.
@end[tbl_cell]@end[tbl_row]

@end[tabular]

@para[]
Использование предустановленных стилей форматирования текста приведено на 
листинге @ref[TEXT_FMT_LISTING].

@begin[listing][TEXT_FMT_LISTING][Использование стилей форматирования текста]
%block TEXT_FMT_STYLES
%include "text-fmt.txt"
%endblock
%shield TEXT_FMT_STYLES
%insert TEXT_FMT_STYLES
@end[listing]



@subsection[SEC_USAGE_FORMATTING_CODE][Форматирование кода]
Данная функция доступна из меню плагинов редактора - F11/@dquoted[Форматирование текста].
При выборе этого пункта раскрывается меню со списком доступных стилей форматирования для редактируемого файла.
@para[]
Для форматирования кода используется плагин третьего уровня @formatter[external-formatter].
В поставляемых конфигурационных файлах предустановленны следующие стили форматирования кода на C++:
Ansi, GNU, Linux, Kernighan and Ritchie. Для форматирования вызывается внешняя программа AStyle 
(ArtisticStyle), которая собственно и производит форматирование.
@para[]
Примеры форматирования кода приведены на листинге @ref[CODE_FMT_LISTING] (Стиль Default сейчас 
настроен на форматирование в стиле GNU, как наиболее подходящий из доступных на текущий момент стилей, 
в будущем его определение может изменится).

@begin[listing][CODE_FMT_LISTING][Использование стилей форматирования кода]
% block CODE_FMT_STYLES
% include "cpp-styles.cpp"
% endblock
% shield CODE_FMT_STYLES
% convert XML2UDF % CODE_FMT_STYLES
% convert CC2X % CODE_FMT_STYLES
% insert CODE_FMT_STYLES
%insertconvertfile "cpp-styles.cpp" CC2X
@end[listing]




@secnotext[]
@section[SEC_TUNING][Настройка плагина]

@subsection[SUBSEC_TUNING_USER_CONFIGS][Пользовательские конфигурационные файлы]
Плагин позволяет использовать индивидуальные настройки для отдельных каталогов. 
Для того, чтобы использовать индивидуальные настройки для каталога, в него следует 
поместить файл с именем @file[texttp-custom-info.xml] (см. листинг @ref[TEXTTP_CUSTOM_INFO_SAMPLE_LISTING]).
@para[]
Поиск файла начинается в том каталоге, в котором расположен редактируемый файл, и производится во всех
каталогах выше по иерархии, до тех пор пока не он встретится или не будет достигнут корневой каталог диска.
@para[]

% @para[]
@begin[note]
Рекомендуется не изменять конфигурационные файлы, которые входят в поставку, так как при обновлении версии плагина 
изменения могут быть утеряны.
@end[note]
Вместо этого все пользовательские настройки лучше хранить в собственном конфигурационном файле (файлах). Для этого 
достаточно поместить в корневых каталогах дисков файл @file[texttp-custom-info.xml] с указанием месторасположения 
пользовательского конфигурационного файла. Дополнительных эффектом такого способа настройки является то, что изменения 
будут вступать в силу немедленно, без перезапуска Far'а.

@begin[listing][TEXTTP_CUSTOM_INFO_SAMPLE_LISTING][Пример файла @fileincap[texttp-custom-info.xml]]
% include "texttp-custom-info-sample.xml.udf"
%insertconvertfile "texttp-custom-info-sample.xml" XML2UDF
@end[listing]

Файл @file[texttp-custom-info.xml] содержит корневой тэг @tag[texttp-custom-info], который содержит
следующие тэги:

@begin[entry]
@entryitemtag[TTP_CUSTOM_INFO_TAG_CONFIG_FILE][config-file]имя пользовательского конфигурационного файла. 
Рекомендуется указывать полный путь к файлу.
@entryitemtag[TTP_CUSTOM_INFO_TAG_TEMPLATE_DIR][template-dir]
каталог, в котором будет 
производится поиск файлов с текстами шаблонов (если файл не будет 
найден в указанном каталоге, его поиск продолжится в основном каталоге
шаблонов - @path[Far/Plugins/Editor/TextTP/Templates]).
Рекомендуется указывать полный путь к каталогу.

% @entryitemtag[][]
@end[entry]
@para[]



@subsection[SUBSEC_TUNING_GENERAL][Конфигурация плагина]
Конфигурация плагина хранится в файле @file[texttp.xml], который 
расположен в одном каталоге с исполняемым модулем плагина. 
Примерный конфигурационный файл приведен на листинге @ref[TEXTTP_CONFIG_SAMPLE_LISTING].

% Дополнительные конфигурационные файлы подключаются тэгом 
% @tag[include]. Атрибут @tagattr[include][file] задает имя подключаемого файла. 
% В приведенном ниже примере подключается конфигурационный 
% файл @file[c-shortcuts.xml].

@begin[listing][TEXTTP_CONFIG_SAMPLE_LISTING][Пример главного конфигурационного файла @fileincap[texttp.xml]]
%insertconvertfile "texttp-sample.xml" XML2UDF
@end[listing]

@para[]
% Атрибут @tagattr[][]
Корневой тэг конфигурационного файла - @tag[texttp]. 
Тэг @tag[include] управляет подключением дополнительных конфигурационных файлов. Имя (и при необходимости путь)
файла задается в атрибуте @tagattr[include][file]. Назначение остальных тэгов подробно рассматривается 
в последующих разделах.

@para[]
Описания и установки, сделанные позже, имеют приоритет и перезаписывают 
аналогичные описания, сделанные ранее. Никаких предупреждений не выводится, 
поэтому следует быть внимательным при настройке плагина. Такое поведение 
сделано для того, чтобы можно было подменять настройки из поставки в 
пользовательских конфигурационных файлах.



@subsection[SUBSEC_FILE_TYPES][Типы файлов]
Большинство функций, предоставляемых плагином, позволяют настраивать 
свое поведение в зависимости от типа редактируемого файла. Типы файлов
обрабатываемых файлов задаются в конфигурации плагина, в секции описания типов файлов, 
которая ограничивается тэгом @tag[file-types]. Пример описания типов файлов приведен на 
листинге @ref[TEXTTP_FILE_TYPES_LISTING].

@begin[listing][TEXTTP_FILE_TYPES_LISTING][Описание типов файлов]
%insertconvertfile "file-types.xml" XML2UDF
@end[listing]

@para[]
Отдельный тип файлов описывается тэгом @tag[file-type], поддерживающим следующие атрибуты:
@begin[entry]
@entryitemtagattr[TAGATTR][file-type][type]задает название типа файла, которое 
будет использоваться в дальнейшем при ссылке на данный тип файла.
@entryitemtagattr[TAGATTR][file-type][extention]@begin[warning]Устаревший атрибут. Не используется, 
начиная с версии 0.906.@end[warning]. Задает список расширений имен файлов для данного типа файла.
Элементы списка разделяются запятыми и не должны содержать незначащих пробелов. Расширение типа файла 
следует указывать вместе с точкой, которая отделяет его от имени файла. 
% В расширении типа фала поддерживается задание маски.
% @entryitemtagattr[TAGATTR][file-type][]
@entryitemtagattr[TAGATTR][file-type][mask]@begin[warning]Новый атрибут, используется 
начиная с версии 0.906.@end[warning]. Задается маска имени файла (список, разделенный запятой)
@entryitemtagattr[TAGATTR][file-type][use-path]@begin[warning]Новый атрибут, используется 
начиная с версии 0.906.@end[warning]. Опеределяет, будет ли при сравнении с маской 
использоваться полное имя файла, содержащее путь, или нет.
@end[entry]

@para[]
В атрибуте @tagattr[file-type][extention] поддерживается задание маски имени файла.
Символ @quoted[*] обозначает любое число любых символов, символ @quoted[?] - однократное 
вхождение любого символа. Символ @quoted[*] можно использовать как в конце, так 
и в середине маски (последняя ситуация не тестировалась исчерпывающе и может 
содержать ошибки в реализации). Ниже приведено несколько тестовых случаев,
на которых проверялась корректность сравнения по маске:

@begin[listing*]
+ .c*p equals to .cxxp @lbr[]
+ .in*mat* equals to .information @lbr[]
+ .in*mat* equals to .inmat @lbr[]
- .in*mat* not equal to .infwat @lbr[]
+ .in*?at* equals to .infwat @lbr[]
- .cpp not equal to .cxx @lbr[]
- .c?? not equal to .hpp @lbr[]
+ .c?? equals to .cpp @lbr[]
+ .c?? equals to .cxx @lbr[]
- .c* not equal to .hpp @lbr[]
+ .c* equals to .cpp @lbr[]
+ .c* equals to .c@lbr[]
@end[listing*]



@subsection[SUBSEC_TEMPLATES][Шаблоны]
Шаблоны могут быть описаны в конфигурационном файле, или находится в отдельных файлах
(существуют еще inline-шаблоны, их использование см. раздел @ref[SUBSEC_SHORTCUTS]).
Шаблоны, описываемые в конфигурационном файле, содержатся в секции шаблонов, которая ограничивается
тэгом @tag[templates]. Примеры задания шаблонов приведены на листинге

@begin[listing][TEXTTP_TEMPLATES_LISTING][Описание шаблонов]
%insertconvertfile "templates.xml" XML2UDF
@end[listing]

@para[]
Отдельный шаблон описывается тэгом @tag[template]. Единственным атрибутом шаблона является 
атрибут @tagattr[template][name] - имя шаблона. В качестве имени шаблона следует использовать 
глобально уникальное имя, которое будет использоваться при ссылках на шаблон. Для переопределения 
тела шаблона (новое тело будет использоваться во всех шорткатах, ссылающихся на данное имя)
следует задать шаблон с таким же именем, как у переопределяемого, и убедиться, что новое определение
будет считываться позже (расположено ниже в том же файле, или файл с новым определением подключается 
позже). Эту возможность можно использовать для настройки отдельных шаблонов под собственные нужды 
без правки оригинальных конфигурационных файлов (см. раздел @ref[SUBSEC_TUNING_USER_CONFIGS]).

@para[]
В теле шаблона символ @quoted[@at] имеет специальное значение. На позицию, в которой он расположен, 
будет перемещен курсор после вставки шаблона. Если необходимо вставить именно символ @quoted[@at],
его следует продублировать. После того, как будет обнаружена позиция курсора, дальнейшая проверка 
тела шаблона не производится и дублировать оставшиеся символы @quoted[@at] не следует.

@para[]
В описании тела шаблона начальные и завершающие пробельные символы, 
а также переводы строк игнорируются, согласно правилам xml. Для 
сохранения разметки следует использовать секции CDATA в описании 
тела шаблона.



@subsection[SUBSEC_TEMPLATES_VARIABLES][Переменные в теле шаблона]
В теле шаблона можно задавать переменные, ограниченные с двух сторон символами @quoted[@usd[]].
При необходимости вставить просто символ @quoted[@usd[]] его следует продублировать.
При обнаружении не использовавшейся ранее переменной будет произведен запрос ее значения с клавиатуры,
и введенное значение будет запомнено для дальнейшего использования. Если при вводе значения любой из
переменных будет нажата клавиша @lsb[]Escape@rsb[], то вставка шаблона будет отменена. Нажатие клавиши 
@lsb[]Enter@rsb[] подтверждает ввод значения.
@para[]
Имя переменной не должно содержать пробельных символов. Рекомендуется выбирать имена переменных так, 
чтобы они отражали суть вводимых данных - при запросе значения имя переменной отображается в диалоге 
ввода.
@para[]
Существует набор предопределенных переменных, значение которых не запрашивается с клавиатуры.
Для получения списка всех предопределенных переменных следует 
создать новый файл с любым расширением и ввести имя шортката - @dquoted[mtest] - 
будет вставлено содержимое тестового шаблона, содержащее примеры использования 
предопределенных переменных.




@subsection[SUBSEC_SHORTCUTS][Шорткаты]
Шорткаты используются для вызова шаблонов. Один и тот же шорткат может вызвать
различные шаблоны в зависимости от типа файла, и одному шаблону может быть назначено 
несколько шорткатов.
@para[]
Шорткаты описываются в секции шорткатов, которая ограничивается тэгом @tag[shortcuts].
Пример описания шорткатов приведен на листинге @ref[TEXTTP_SHORTCUTS_LISTING].

@begin[listing][TEXTTP_SHORTCUTS_LISTING][Описание шорткатов]
%insertconvertfile "shortcuts.xml" XML2UDF
@end[listing]

@para[]
Отдельный шорткат описывается тэгом @tag[shortcut], который имеет следующие атрибуты:
@begin[entry]
@entryitemtagattr[TAGATTR][shortcut][name]имя шортката, которое пользователь набирает с 
клавиатуры для вызова соответствующего шорткату шаблона.
@entryitemtagattr[TAGATTR][shortcut][file-type]список типов файлов, к которым применяется шорткат.
Элементы списка разделяются запятыми и не должны содержать незначащих пробелов.
Обязательный атрибут.
@entryitemtagattr[TAGATTR][shortcut][template]имя шаблона, вызываемого данным шорткатом.
@entryitemtagattr[TAGATTR][shortcut][line-before]вставляет пустую строку перед вставляемым телом шаблона.
Действие этого атрибута малоизученно, а полезность сомнительна. Оставлен для совместимости с ранними 
версиями плагина. Значение по умолчанию - @ident[false].
@entryitemtagattr[TAGATTR][shortcut][line-after]вставляет пустую строку после вставляемого тела шаблона.
Действие этого атрибута малоизученно, а полезность сомнительна. Оставлен для совместимости с ранними 
версиями плагина. Значение по умолчанию - @ident[false].
@entryitemtagattr[TAGATTR][shortcut][keep-indent]оставлять отступ. При вставке шаблона все его 
строки будут вставлены начиная с позиции, в которой находится курсор. Значение по умолчанию - @ident[false].
% @entryitemtagattr[TAGATTR][shortcut][]
@end[entry]

@para[]
В атрибуте @tagattr[shortcut][template] можно использовать префиксы, отделяемые от имени 
шаблона символом @quoted[:] (двоеточие). На данный момент используются следующие префиксы:
@begin[entry]
@entryitem[TEMPLATE_PREFIX_FILE][file]указывает, что тело шаблона следует искать во внешнем файле.
Поиск файла производится сначала в каталоге, указанном в тэге 
%if defined(WINHELP)
@popref[TTP_CUSTOM_INFO_TAG_TEMPLATE_DIR] %
%else
@tag[template-dir] %
%endif
в пользовательском конфигурационном файле (см. раздел @ref[SUBSEC_TUNING_USER_CONFIGS]), 
затем в подкаталоге @path[templates] относительно расположения главного модуля плагина.

@entryitem[TEMPLATE_PREFIX_INLINE][inline]указывает, что тело шаблона непосредственно следует за префиксом.
Может использоватся для упрощения создания небольших шаблонов.
@end[entry]

@para[]
В примере, приведенном на листинге @ref[TEXTTP_SHORTCUTS_LISTING], заданы шортаты, которые вставят:
@begin[listing*]
для файла .cpp ввод // вставит // @lbr[]
для файла .c   ввод // вставит /*  */ @lbr[]
для файла .cpp ввод sep вставит //-------...----------- @lbr[]
для файла .c   ввод sep вставит /*-------...---------*/ @lbr[]
ввод csep для файлов .c и .cpp вставит /*-------...---------*/ @lbr[]
ввод xsep для файлов .c и .cpp вставит //-------...-----------@lbr[]
@end[listing*]

% @para[]




@subsection[SUBSEC_STD_SHORTCUTS][Стандартные шорткаты]
Шорткаты, входящие в поставочную конфигурацию, в основном предназначены для 
использования в исходных текстах программ на C/C++ и находятся в файле
@file[c-shortcuts.xml].




@subsection[SUBSEC_COMMENTING_CODE][Комментирование кода]
В плагине реализовано два способа комментирования кода - комментирование потоков символов 
(@ident[stream]) и комментирование блоком строк (@ident[lines]). 
Комментирование потоков символов - это комментирование фрагмента,
начало и конец выделения которого начинается и заканчивается в произвольном месте строки.
Комментирование блоков строк - это комментирование фрагмента, в котором строки выделены целиком 
от начала и до конца.
Пример комментирования произвольных фрагментов (потоков) приведен на листинге 
@ref[PIC_COMMENTING_STRM], примеры комментирования блоков строк приведены на листингах
@ref[PIC_COMMENTING_BLK1], @ref[PIC_COMMENTING_BLK2] и @ref[PIC_COMMENTING_BLK3].

@para[]
Для каждого типа файлов могут быть заданы оба способа комментирования, либо только один из них.
В последнем случае для любого типа выделения будет использоваться только заданный способ.

@para[]
В Far'е существует возможность выделения вертикального блока текста. Такой блок также может 
быть автоматически закомментирован, при этом будут использоваться параметры потокового 
комментирования для каждой строки блока. Пример такого комментирования приведен ранее на рисунке
@ref[PIC_COMMENTING_CODE] (последний снимок экрана).


@begin[picture][PIC_COMMENTING_STRM][Комментирование кода: @dquoted[поток]]
@picture[commstrm][90]
@end[picture]

@begin[picture][PIC_COMMENTING_BLK1][Комментирование кода: блок строк, способ 1]
@picture[commblk1][90]
@end[picture]

@begin[picture][PIC_COMMENTING_BLK2][Комментирование кода: блок строк, способ 2]
@picture[commblk2][90]
@end[picture]

@begin[picture][PIC_COMMENTING_BLK3][Комментирование кода: блок строк, способ 3]
@picture[commblk3][90]
@end[picture]

@para[]
На листинге @ref[TEXTTP_COMMENTING_CODE_LISTING] приведена конфигурация способов комментирования, 
действие которых проиллюстрировано на листингах выше. Параметры комментирования описываются
в секции @dquoted[последовательности комментирования], ограниченной тэгом @tag[comment-sequences].

@begin[listing][TEXTTP_COMMENTING_CODE_LISTING][Описание способов комментирования]
%insertconvertfile "comments.xml" XML2UDF
@end[listing]

@para[]
Каждый способ комментирования описывается @tag[comment], который имеет следующие атрибуты:

@begin[entry]
@entryitemtagattr[TAGATTR][comment][file-type]
Типы файлов, к которым применяется данное правило комментирования, содержит разделяемый запятой список
имен типов файлов. Обязательный атрибут.

@entryitemtagattr[TAGATTR][comment][comment-type]
Тип коментария, может принимать значения: @ident[stream] (@dquoted[потоковый комментарий]) 
и @ident[lines] (комментирование блока строк). Значение по умолчанию - @ident[lines].

@entryitemtagattr[TAGATTR][comment][begin-sequence]последовательность символов, 
обозначающия начало потокового коментария. Обязательно следует задавать для потокового коментария.
Если данный атрибут не задан, будет использовано значение, указанное в атрибуте 
@popref[TAGATTR_comment_end-sequence]. 
Если не заданы оба атрибута - @ident[begin-sequence] и 
@ident[end-sequence], то коментарий будет ситаться как коментарий типа @popref[TAGATTR_comment_comment-type],
вне зависимости от значения атрибута @popref[TAGATTR_comment_comment-type].

@entryitemtagattr[TAGATTR][comment][end-sequence]последовательность символов, 
обозначающия конец потокового коментария. Обязательно следует задавать для потокового коментария.
Если данный атрибут не задан, будет использовано значение, указанное в атрибуте 
@popref[TAGATTR_comment_begin-sequence].
Если не заданы оба атрибута - @ident[begin-sequence] и 
@ident[end-sequence], то коментарий будет считаться как коментарий типа @popref[TAGATTR_comment_comment-type],
вне зависимости от значения атрибута @popref[TAGATTR_comment_comment-type].

@entryitemtagattr[TAGATTR][comment][sequence]последовательность символов, 
обозначающая однострочный комментарий. Блоки строк могут коментироваться как потоковым комментарием,
так и однострочным для каждой строки блока. Если используется потоковый тип комментирования для блока строк, то 
следует задавать какой-либо символ (последовательность) в данном атрибуте - она будет использована
во всех строках блока, кроме начальной и конечной (рекомендуется задавать, так как по этим символам будет
определяться тип комментария при работе функций @dquoted[Выделить закомментированое] и @dquoted[Раскомментировать]). 
При комментировании потока символов данная последовательность не будет использоваться.
Результат комментирования потоковым комментарием блока строк
приведен на листингах @ref[PIC_COMMENTING_BLK1] и @ref[PIC_COMMENTING_BLK2] (заданы 
@ident[begin-sequence]=@dquoted[/*], @ident[end-sequence]=@dquoted[*/] и @ident[sequence]==@dquoted[*])
Результат комментирования блока строк однострочным комментарием приведен на листинге
@ref[PIC_COMMENTING_BLK3] (задан только атрибут @ident[sequence]==@dquoted[//]).

@entryitemtagattr[TAGATTR][comment][indent]
Дополнительный отступ между символами коментирования и комментируемым текстом (в пробелах), 
при раскомментировании также удаляется. Данный отступ также вставляется перед вставкой последовательности 
конца комментария 
(см. пояснения к рисункам @ref[PIC_COMMENTING_SPACES_STRM], @ref[PIC_COMMENTING_SPACES_BLK1], 
@ref[PIC_COMMENTING_SPACES_BLK2] и @ref[PIC_COMMENTING_SPACES_BLK3]).
Значение по умолчанию - 0.

@entryitemtagattr[TAGATTR][comment][end-at-new-line]
Используется при комментировании блоков строк потоковым коментарием, при указании значения 
@ident[true] конец коментария переноситься на новую строку, при задании значения 
@ident[false] конец коментария добавляется в конец последней комментируемой строки 
(различие показано на рисунках @ref[PIC_COMMENTING_BLK1] и @ref[PIC_COMMENTING_BLK2]).
Значение по умолчанию - @ident[false].

@entryitemtagattr[TAGATTR][comment][new-line-indent-before]
Используется при комментировании блоков строк поточным комментарием, задает отступ (в пробелах),
на величину которого будут сдвинуты символы, заданные в атрибуте 
@popref[[TAGATTR_comment_sequence]] (а также сдвиг в последней строке перед завершающей комментарий 
последовательностью, если @popref[[TAGATTR_comment_end-at-new-line]]=@dquoted[true]).
Значение по умолчанию - 0.

@end[entry]


@begin[picture][PIC_COMMENTING_SPACES_STRM][Комментирование кода: @dquoted[поток], пробелы]
@picture[cstrm][120]
@end[picture]

@begin[picture][PIC_COMMENTING_SPACES_BLK1][Комментирование кода: блок строк, способ 1, пробелы]
@picture[cblk1][120]
@end[picture]

@begin[picture][PIC_COMMENTING_SPACES_BLK2][Комментирование кода: блок строк, способ 2, пробелы]
@picture[cblk2][120]
@end[picture]

@begin[picture][PIC_COMMENTING_SPACES_BLK3][Комментирование кода: блок строк, способ 3, пробелы]
@picture[cblk3][120]
@end[picture]

@para[]
На рисунках @ref[PIC_COMMENTING_SPACES_STRM], @ref[PIC_COMMENTING_SPACES_BLK1], 
@ref[PIC_COMMENTING_SPACES_BLK2] и @ref[PIC_COMMENTING_SPACES_BLK3] показано, каким образом используются
атрибуты @popref[TAGATTR_comment_indent] и @popref[TAGATTR_comment_new-line-indent-before]:

@para[]
на рисунке @ref[PIC_COMMENTING_SPACES_STRM]: 1, 3 - отступ @popref[TAGATTR_comment_new-line-indent-before],
2 - @popref[TAGATTR_comment_indent].

@para[]
на рисунке @ref[PIC_COMMENTING_SPACES_BLK1]: 1 - отступ @popref[TAGATTR_comment_new-line-indent-before],
2 - @popref[TAGATTR_comment_indent].

@para[]
на рисунке @ref[PIC_COMMENTING_SPACES_BLK2]: 1 - отступ @popref[TAGATTR_comment_new-line-indent-before],
2, 3 - @popref[TAGATTR_comment_indent].

@para[]
на рисунке @ref[PIC_COMMENTING_SPACES_BLK3]: 1 - @popref[TAGATTR_comment_indent].




@subsection[SUBSEC_BLOCK_SELECTION][Выделение блоков текста/кода]
Выделение блоков текста не тербует какой-либо настройки. Блоком текста считаются 
фрагменты текста, разделенные одной или несколькими пустыми строками 
(не содержащими ничего, кроме символов пробела и табуляции).

@para[]
Поведение функции @dquoted[выделение блока кода] настраивается в секции,
которая ограничивается тэгом @tag[block-selections].

@begin[listing][TEXTTP_BLOCK_SELECTION_LISTING][Описание блоков кода]
%insertconvertfile "blocksel.xml" XML2UDF
@end[listing]

@para[]
Описание выделения блоков кода для отдельных типов файлов описываются тэгом @tag[selection], 
поддерживающим следующие атрибуты:

@begin[entry]

@entryitemtagattr[TAGATTR][selection][case-sensitive]может принимать значения @ident[true] или 
@ident[false] в зависимости от того, является ли описываемый тип файлов чувствительным к регистру символов.
Значение по умолчанию - @ident[true].

@entryitemtagattr[TAGATTR][selection][file-type]
Типы файлов, к которым применяется данное правило, содержит разделяемый запятой список
имен типов файлов. Обязательный атрибут.

@end[entry]


@para[]
Блоки кода описываются в тэгами @tag[block],
поддерживающим следующие атрибуты:
@begin[entry]
@entryitemtagattr[TAGATTR][block][begin]Строка с которой начинается бок кода.
@entryitemtagattr[TAGATTR][block][end]Строка, которой заканчивается блок кода.
@end[entry]

@para[]
Блоки кода ограничены строками начала и конца. 
Начало блока кода - это строка, 
содержащая в начале последовательность символов, 
заданную в атрибуте @tagattr[block][begin] тэга @tag[block].
Конец блока кода - это строка, 
содержащая в начале последовательность символов, 
заданную в атрибуте @tagattr[block][end] тэга @tag[block].
Данная функция не будет корректно работать при способах форматирования кода, когда ограничивающие блоки
символы располагаются не на отдельной от предыдущего кода строке.



@subsection[SUBSEC_INCREMENTAL_SELECTION][Инкрементальное выделение]
Инкрементальное выделение циклически работает в пределах одной строки - после 
выделения всей строки целиком выделение сбрасывается и при следующем вызове 
функции начинается с начала.
%<
@para[]
Текст в строке представляется как набор слов, стоп-символов (последовательностей) и блоков - 
выражений, ограниченных парными стоп-символами. Выделение работает таким образом: внутри блока, 
в котором находится курсор, последовательно выделяются части строки, останавливаясь на каждом 
шаге на стоп-символах. Выделение производится сначала вправо, затем влево до ограничитей 
объемлющего блока. Затем выделяется блок, далее выделение производится аналогично,
до тех пор, пока не будет выделена строка целиком, за исключением того, что блоки, 
стоящие ниже или на том же уровне иерархии, чем блок, в котором началось выделение, 
выделяются целиком.
%>
@para[]
Поведение функции @dquoted[инкрементальное выделение] описывается в секции, ограниченной тэгом
@tag[incremental-selection].

@para[]
Для каждого типа выделения создается тэг @tag[break-symbols], содержащий следующие атрибуты:
@begin[entry]
@entryitemtagattr[TAGATTR][break-symbols][file-type]
В данном атрибуте задается список типов файлов, для которых работает данное
правило. В данном атрибуте может использоваться специальное зарезервированное 
имя типа файла - @ident[default]. Правило с таким типом в списке имен файлов будет применятся, если
для файла не будет найден более подходящее правило.

@entryitemtagattr[TAGATTR][break-symbols][use-backslash-escape]отвечает за обработку строковых/символьных
литералов и включает правила языка C/C++ - экранирование специальных символов символом @quoted[@bsl[]].
Допустимые значения @ident[true] и @ident[false]. Значение по умолчанию - @ident[true]. Не следует одновременно
включать данную опцию и опцию @popref[TAGATTR_break-symbols_use-duplicate-quotation-escape].

@entryitemtagattr[TAGATTR][break-symbols][use-duplicate-quotation-escape]
отвечает за обработку строковых/символьных
литералов и включает правила языка Pascal/Object Pascal символы кавычек в строках должны дублироваться.
Допустимые значения @ident[true] и @ident[false]. Значение по умолчанию - @ident[false]. Не следует одновременно
включать данную опцию и опцию @popref[TAGATTR_break-symbols_use-backslash-escape].

@entryitemtagattr[TAGATTR][break-symbols][use-single-quotes]включает поддержку литералов, заключенных 
в одинарные кавычки (апострофы). Значение по умолчанию - @ident[true].

@entryitemtagattr[TAGATTR][break-symbols][use-double-quotes]включает поддержку литералов, заключенных 
в двойные кавычки. Значение по умолчанию - @ident[true].

@end[entry]

@para[]
В тэге @tag[break-symbols] содержаться вложенные наборы тэгов @tag[break-symbol] и @tag[break-symbol-pair].
Тэг @tag[break-symbol] не имеет атрибутов и должен содержать стоп-символ (стоп-последовательность), которая 
не имеет парной стоп последовательности. Тэг @tag[break-symbol-pair] имеет атрибуты 
@tagattr[break-symbol-pair][begin] и @tagattr[break-symbol-pair][end] - в них должна быть задана пара стоп-последовательностей 
начало/конец. Парные стоп-последовательности образуют иерархические блоки, на границах которых 
функция @dquoted[инкрементальное выделение] меняет свое поведение.
@para[]
Поведение функции @dquoted[инкрементальное выделение] 
описано в разделе @ref[SEC_USAGE_INCREMENTAL_SELECTION].



@subsection[SUBSEC_TABULATION][Индивидуальные настройки редактора]
Для каждого из типов файлов можно задать поведение табуляции (клавиши @lsb[]Tab@rsb[]) - в редактируемый текст 
будет вставляться либо символ табуляции, либо заданное количество пробельных символов.
Дополнительно можно настраивать некоторые другие параметры 
% особенности
работы редактора. Пример настроек редактора приведен на листинге @ref[TEXTTP_EDITOR_SETTINGS_LISTING].
% @para[]Конфигурация настроек

@begin[listing][TEXTTP_EDITOR_SETTINGS_LISTING][Описание настроек редактора]
%insertconvertfile "esettings.xml" XML2UDF
@end[listing]

Все атрибуты могу принимать слудующие целочисленные значения: 
@begin[unumerate]
@item[]-1 - не изменять соответствующий параметр работы редактора (исользуется значение, заданное в настройках Far);
@item[]0 - значение false для булевых атрибутов.
@item[]не ноль - значение true для булевых атрибутов. Для атрибута 
@tagattr[editor-settings][tab-size] задает размер табуляции.
@end[unumerate]

@begin[entry]
@entryitemtagattr[TAGATTR][editor-settings][file-type]задает разделяемых запятой список типов файлов, 
к которому будут применяться данные настройки редактора. Для задания настроек для всех типов файлов, 
для которых нет явного правила, используется тип файла @dquoted[*].
@entryitemtagattr[TAGATTR][editor-settings][expand-tabs-to-spaces]определяет, будут ли символы табуляции 
заменяться пробельными символами.
Может принимать значения true/false/default , см. описание выше.
@entryitemtagattr[TAGATTR][editor-settings][tab-size]задает размер табуляции.
Может принимать значения true/false/размер тыбуляции, см. описание выше.
@entryitemtagattr[TAGATTR][editor-settings][auto-indent]определяет использование автоотступа.
Может принимать значения true/false/размер тыбуляции, см. описание выше.
@entryitemtagattr[TAGATTR][editor-settings][cursor-beyond-eol]управляет опцией редактора "Курсор за пределами строки".
Может принимать значения true/false/размер табуляции, см. описание выше.
% @entryitemtagattr[TAGATTR][editor-settings][]
@end[entry]

@para[]@begin[warning]Данная возможность плагина может конфликтовать с возможностями, предоставляемыми плагином 
ESC. Существует возможность отключить данную функциональность в меню конфигурации плагина.@end[warning]

@para[]@begin[note]Для корректной работы данной функции следует отключить глобальную настройку редактора 
@dquoted[Пробелы вместо табуляции] (@dquoted[Expand tabs to spaces]) и пользоваться для настройки возможностями данного плагина.
Это связано с тем, что редактор при открытии файла атоматически преобразовывает символы табуляции в пробелы до того, как 
плагин устанавливает индивидуальные настройки для редактируемого файла. Если для типа редактируемого файла установлена опция 
@tagattr[editor-settings][expand-tabs-to-spaces], то она работает только для вновь вводимых символов табуляции и не 
преобразовывает уже содержащиеся в файле.
Для установки настроек редактора для всех 
файлов используется тип файла @dquoted[*].
@end[note]


@subsection[SUBSEC_FORMATTING][Форматирование текста/кода]
Форматирование текста производится при помощи внешних модулей плагина @ttp[] - 
плагинов третьего уровня.
Плагины третьего уровня представляют из себя динамические библиотеки, 
предоставляющие простой интерфейс для форматирования текста. Каждый плагин имеет внутреннее имя, 
не обязательно совпадающее с именем динамической библиотеки. 
Для получения информации о внутреннем имени плагина используется программа @cmd[pluginfo.exe], 
которая расположена в основном каталоге плагина @ttp[]. Данная команда получает в качестве 
аргумента командной строки список путей (разделенный символом @quoted[;]), сканирует заданные каталоги,
определяя наличие в них плагинов третьего уровня, и выводит для каждого найденного внутреннее имя и путь,
по которому расположен соответствующий модуль. Пример вывода программы @cmd[pluginfo.exe] приведен 
на листинге @ref[TEXTTP_PLUGINFO_SAMPLE_LISTING]. Программа сканирует заданные каталоги, а также все 
подкаталоги заданных каталогов. Если пути поиска не заданы в командной строке, то поиск производится, 
начиная с каталога, в котором расположена программа.

@para[]
Плагины третьего уровня принимают текст для форматирования единым фрагментом, строки в котором разделяются
символом новой строки (или парой символов CR LF). Также плагин принимает набор опций,значения которых задаются
в конфигурационном файле плагина @ttp[].

@begin[listing][TEXTTP_PLUGINFO_SAMPLE_LISTING][Вывод информации о плагинах третьего уровня]
%insertshieldfile "pluginfo.txt"
@end[listing]
% @para[]
На листинге выше программа @cmd[pluginfo.exe] обнаружила два плагина третьего уровня - 
@formatter[simple-text-format] в @file[text-fmt.dll]) и @formatter[external-formatter] в @file[ext-fmt.dll].

@para[]@begin[attention]
Внутренние имена плагинов третьего уровня используются в описаниях стилей форматирования для вызова 
соответствующего плагина.@end[attention]
@para[]

% Стили форматирования настраиваются для каждого типа файлов отдельно.
Настройка стилей форматирования 
описывается в конфигурационном файле в секции, ограниченной тэгом
@tag[formatting].

@begin[listing][TEXTTP_FORMATTING_SECTION_LISTING][Конфигурация функции @dquoted[форматирование текста]]
%insertconvertfile "fmtsty.xml" XML2UDF
@end[listing]

@para[]
Описание отдельного стиля заключается в тэге @tag[style], 
поддерживающим следующие атрибуты:

@begin[entry]

@entryitemtagattr[TAGATTR][style][name]имя стиля, которое будет отображено в меню доступных для текущего файла стилей
и доступно через меню внешних модулей в редакторе (F11 - @dquoted[Форматирование текста]).
Обязательный атрибут.

@entryitemtagattr[TAGATTR][style][file-type]список типов файлов, к которым применяется шорткат.
Элементы списка разделяются запятыми и не должны содержать незначащих пробелов.
Обязательный атрибут.

@entryitemtagattr[TAGATTR][style][plugin]внутреннее имя плагина, вызываемого для задаваемого стиля.
Обязательный атрибут.

@entryitemtagattr[TAGATTR][style][hotkey]клавиша быстрого доступа. Помещается перед именем стиля в меню стилей.

@entryitemtagattr[TAGATTR][style][useCRLF]задает способ, который будет использоватся для разделения текста на строки
при передече его в плагин третьего уровня. @ident[false] - будут использоваться только символы перевода строки LF, 
@ident[true] - будет использоваться пара символов CR LF. Значение по умолчанию - @ident[true].

@entryitemtagattr[TAGATTR][style][keep-indent]сохранять отступ - в некоторых случаях при форматировании текста 
плагины форматирования могут удалять ведущие пробелы в начале строк текста. Чтобы этого не происходило,
плагин @ttp[] может определить минимальный отступ фрагмента и восстановить его после завершения форматирования.
Значение по умолчанию - @ident[false].
@end[entry]

@para[]
В тэге @tag[style] может располагаться вложенный тэг @tag[options], который содержит параметры (опции), передаваемые 
плагину форматирования. Каждый параметр описывается тэгом @tag[option], 
% единственным атрибутом которого
имеющим единственный атрибут @tagattr[option][name], задающим имя параметра (опции).
Значение параметра задается в виде текста данного тэга.

@para[]
В плагин всегда передаются следующие предопределенные параметры:

@begin[entry]
@entryitem[PLUGIN_FMT_VAR_NAME___PluginBasePath][@usd[]__PluginBasePath@usd[]]путь к плагину @ttp[].
@entryitem[PLUGIN_FMT_VAR_NAME___PluginFileName][@usd[]__PluginFileName@usd[]]полное имя файла вызываемого плагина третьего уровня.
@entryitem[PLUGIN_FMT_VAR_NAME___PluginPath][@usd[]__PluginPath@usd[]]полный путь к файлу вызываемого плагина третьего уровня.
@end[entry]


@subsubsection[SUBSEC_FORMATTING_PLUGIN_SIMPLE_TEXT_FORMAT][Плагин simple-text-format]
Плагин @formatter[simple-text-format] форматирует разделенный на абзацы простой текст. 
Абзацы отделяются друг от друга пустой строкой.
@para[]
Плагин @formatter[simple-text-format] может принимать следующие параметры:
@begin[entry]
@entryitem[FMT_PARAM_SIMPLE_TEXT_FORMATTER_INDENT][indent]отступ от начала строки, 
добавляемый ко всем строкам форматируемого текста.
Значение по умолчанию - 0.
@entryitem[FMT_PARAM_SIMPLE_TEXT_FORMATTER_PARA_FIRST_LINE_INDENT][para-first-line-indent]отступ 
первой строки абзаца.
Значение по умолчанию - 2.
@entryitem[FMT_PARAM_SIMPLE_TEXT_FORMATTER_LINE_INDENT][line-indent]отступ 
последующих строк абзаца.
Значение по умолчанию - 0.
@entryitem[FMT_PARAM_SIMPLE_TEXT_FORMATTER_WIDTH][width]ширина абзаца. Полная ширина 
абзаца получается сложением этого параметра 
и параметра @popref[FMT_PARAM_SIMPLE_TEXT_FORMATTER_LINE_INDENT].
Значение по умолчанию - 78.
@entryitem[FMT_PARAM_SIMPLE_TEXT_FORMATTER_FORMAT_TYPE][format-type]тип форматирования, 
может прнимать значения:
@ident[width] - по ширине с добавлением пробелов между слов, 
@ident[center] - по центру, 
@ident[left] - по левому краю, 
@ident[right] - по правому краю.
Значение по умолчанию - @ident[width].
@end[entry]


@subsubsection[SUBSEC_FORMATTING_PLUGIN_EXTERNAL_FORMATTER][Плагин external-formatter]
Плагин @formatter[external-formatter] используется для вызова внешней программы для форматирования текста.
Внешняя програма должна считывать входные данные из стандартного потока ввода, выводить результат 
в стандартный поток вывода, и выводить сообщения об ошибках в стандартный поток ошибок.

@para[]
Плагин при вызове создает три соответствующих файла вида @file[~eftXXXX.tmp] во временном каталоге ОС, 
в один из них записывает входной текст, из других считывает резудьтат. После завершения обработки файлы удаляются 
(можно указать опцию сохранения временных файлов).

@para[]
Если код возврата вызываемой программы не равен 0, то плагин считывает содержимое потока ошибок и выводит 
соответствующее сообщение, форматируемый текст при этом не меняется.

@para[]
Плагин @formatter[external-formatter] может принимать следующие параметры:
@begin[entry]
@entryitem[FMT_PARAM_EXTERNAL_FORMATTER_COMMAND][command]имя вызываемой программы.
@entryitem[FMT_PARAM_EXTERNAL_FORMATTER_COMMAND_LINE][command-line]
аргументы командной строки, передаваемые вызваемой программе. Значения парметров, содержащие пробелы, следует
заключать в двойные кавычки.
@entryitem[FMT_PARAM_EXTERNAL_FORMATTER_KEEP_TEMP_FILES][keep-temp-files]запрещает/разрешает (@ident[false]/@ident[true])
оставлять временные файлы на диске во временном каталоге.
@entryitem[FMT_PARAM_EXTERNAL_FORMATTER_IGNORE_EXIT_CODE][ignore-exit-code]разрешает игнорировать
код возврата вызываемой программы.
@end[entry]


@para[]
В значениях параметров (опций) @popref[FMT_PARAM_EXTERNAL_FORMATTER_COMMAND] и 
@popref[FMT_PARAM_EXTERNAL_FORMATTER_COMMAND_LINE] можно использовать переменные, 
ограниченные символами @usd[].
Доступны следующие переменные:

@begin[entry]
@entryitem[PLUGIN_FMT_VAR_NAME___PluginBasePath][@usd[]__PluginBasePath@usd[]]путь к плагину @ttp[].
% @entryitem[PLUGIN_FMT_VAR_NAME___PluginFileName][@usd[]__PluginFileName@usd[]]полное имя файла вызываемого плагина третьего уровня.
% @entryitem[PLUGIN_FMT_VAR_NAME___PluginPath][@usd[]__PluginPath@usd[]]полный путь к файлу вызываемого плагина третьего уровня.

@entryitem[PLUGIN_FMT_VAR_NAME_InputFile][@usd[]InputFile@usd[]]имя входного временного файла. 
Если данный параметр встречается в командной строке или строке аргументов,
то стандартный поток ввода не используется при вызове программы.

@entryitem[PLUGIN_FMT_VAR_NAME_OutputFile][@usd[]OutputFile@usd[]]имя выходного временного файла. 
Если данный параметр встречается в командной строке или строке аргументов,
то стандартный поток вывода не используется при вызове программы.

@entryitem[PLUGIN_FMT_VAR_NAME_ErrFile][@usd[]ErrFile@usd[]]имя временного файла, в который записываются сообщения об ошибках.
Если данный параметр встречается в командной строке или строке аргументов,
то стандартный поток ошибок не используется при вызове программы.
% @entryitem[PLUGIN_FMT_VAR_NAME_][@usd[]@usd[]]

@end[entry]


%include "../src/ttpapi.h"
%include "../src/ttpapiimpl.h"


@section[SEC_TTPAPI][TextTemplates API]
Плагин предоставляет расширяемое API для доступа к своим внутренним функциям и данным.
Данное API может аналогично использоваться и в сторонних плагинах для унификации 
способа межплагинного взаимодействия.
@para[]
Плагин предоставляет доступ к API через единственную экспортируемую функцию 
@ident[ttpapiCreateObject]@hindex[Функция][ttpapiCreateObject] (см. раздел @ref[ttpapiCreateObjectProc]), 
создающую объекты, предоставляющие различные интерфейсы.
@para[]В текущей версии реализована функциональность получения типа файла по его полному имени. 
Данная функциональность предоставляется для использования сторонними плагинами для
получении информации о типах файлов из единого источника, чтобы избежать хранения аналогичной 
(и возможно, противоречивой) информации в конфигурационных файлах других плагинов.
@para[]Также плагин предоставляет доступ к функции сравнения имени файла с маской.
@para[]В дальнейшем список предоставляемой плагином информации и набор функций будет расширяться.

@para[]Для управления временем жизни объектов используется механизм подсчета ссылок.

@para[]Поиск соответствующего плагина производится следующим образом:
@begin[enumerate]
@item[]Производится перечисление всех модулей (dll), загруженных в текущий процесс Far'а;
@item[]У каждого модуля запрашивается адрес функции 
@ident[ttpapiCreateObject]@hindex[Функция][ttpapiCreateObject] (см. раздел @ref[ttpapiCreateObjectProc]), 
если она не найдена, то модуль пропускается;
@item[]Запрашивается создание объекта 
@ident[CLSID_PLUGINVERSIONINFO]@hindex[Идентификатор класса объекта][CLSID_PLUGINVERSIONINFO] (см. раздел @ref[IPluginVersionInfo])
и возврат интерфейса @ident[IID_PLUGINVERSIONINFO]@hindex[Интерфейс][IID_PLUGINVERSIONINFO], 
если возвращается 0, то модуль пропускается;
@item[]Запрашивается внутреннее имя модуля и сравнивается с искомым;
@item[]Запрашивается версия модуля.
@end[enumerate]

@para[]
Данная функциональность реализована функциями 
@ident[findPlugin]@hindex[Функция][findPlugin] (см. раздел @ref[ttpapi_findPlugin]) и 
@ident[getFileType]@hindex[Функция][getFileType] (см. раздел @ref[ttpapi_getFileType]).
% @ident[]@hindex[Функция][] (@ref[])


@subsection[ttpapiCreateObjectProc][ttpapiCreateObject]
Функция @ident[ttpapiCreateObject]@hindex[Функция][ttpapiCreateObject] экспортируется 
плагином и создает объект по заданному имени, 
запрашивая указанный интерфейс.

@begin[listing*]
%convert CC2X -fCreateObjectProc_ -vobjectId,interfaceId % BLOCK_CreateObjectProc
%insert BLOCK_CreateObjectProc
@end[listing*]

Данная функция принимает следующие параметры:
@begin[entry]
@entryitem[fCreateObjectProc_objectId][objectId]идентификатор типа (класса) создаваемого объекта.
@entryitem[fCreateObjectProc_interfaceId][interfaceId]идентификатор интерфейса, запрашиваемого у создаваемого объекта.
@end[entry]

@para[]
Если запрошен неподдерживаемый тип (класс) объекта или созданный объект не поддерживает запрашиваемый интерфейс, 
функция возвращает 0.
@para[]
После возврата указателя на интерфейс счетчик ссылок на объект устанавливается равным 1.
Для освобождения объекта после его использования следует вызвать метод 
@ident[release] (см. раздел @ref[ITtpApiUnknown]).



@subsection[ITtpApiUnknown][Интерфейс ITtpApiUnknown]
Интерфейс @ident[ITtpApiUnknown] является базовым интерфейсом 
для всех объектов и предоставляет методы для подсчета ссылок и запроса интерфейсов объекта.

@begin[listing*]
%convert CC2X -fITtpApiUnknown_ -vaddRef,release,queryInterface % BLOCK_IUnknown
%insert BLOCK_IUnknown
@end[listing*]

@begin[entry]
@entryitem[ITtpApiUnknown_addRef][addRef]увеличивает счетчик ссылок на объект. Следует вызывать,
если указатель на интерфейс объекта сохраняется для последующего использования, для предотвращения 
преждевременного разрушения объекта.
@entryitem[ITtpApiUnknown_release][release]уменьшает счетчик ссылок на объект. Объект разрушается,
если его счетчик ссылок равен 0. Метод @ident[release] следует вызывать для каждого вызова метода 
@popref[ITtpApiUnknown_addRef]. Дополнительно, метод @ident[release] следует вызывать после освобождения 
объекта по указателю на интерфейс, который был возвращен функцией @ident[ttpapiCreateObject] (см. 
раздел @ref[ttpapiCreateObjectProc]), и после каждого вызова метода 
@ident[@popref[ITtpApiUnknown_queryInterface]].
@entryitem[ITtpApiUnknown_queryInterface][queryInterface]запрашивает указатель на интерфейс 
объекта по имени интерфейса и возвращает 0, если интерфейс не поддерживается.
@end[entry]



@subsection[IPluginVersionInfo][Интерфейс IPluginVersionInfo]

@begin[listing*]
%convert CC2X -fIPluginVersionInfo_ -vgetInternalName,getVersion,getValueString % BLOCK_IPluginVersionInfo
%insert BLOCK_IPluginVersionInfo
@end[listing*]

@begin[entry]
@entryitem[IPluginVersionInfo_getInternalName][getInternalName]
возвращает в буфере внутреннее имя плагина (может несовпадать с именем dll). Возвращает количество символов (байт),
скопированных в буфер. Если указатель на буфер не задан (равен 0), то реального копирования строки не происходит, 
возвращается размер требуемого буфера.
@entryitem[IPluginVersionInfo_getVersion][getVersion]возвращает версию плагина. Формат упаковки номера версии 
в беззнаковое целое зависит от типа плагина.
@entryitem[IPluginVersionInfo_getValueString][getValueString]возвращает в буфере именованый параметр-строку.
Всегда возвращает -1, если строка-параметр с таким именем не определена, 0 - если в буфере недостаточно места для строки.
Если указатель на буфер равен 0, то возвращается требуемый размер буфера. Имена и значения именованных параметров 
определяются конкретным плагином.
@end[entry]


@subsection[ITtpConfig][Интерфейс ITtpConfig]@hindex[Интерфейс][ITtpConfig]
Предоставляет доступ к данным о конфигурации плагина.
Методы @ident[updateForFile]@hindex[Метод][updateForFile] и
@ident[updateForPath]@hindex[Метод][updateForPath] обновляют данные конфигурации плагина для заданного файла или каталога
(см. раздел @ref[SUBSEC_TUNING_USER_CONFIGS]).

@begin[listing*]
%convert CC2X -fITtpConfig_ -vupdateForFile,updateForPath,getFileType % BLOCK_ITtpConfig
%insert BLOCK_ITtpConfig
@end[listing*]

@begin[entry]
@entryitem[ITtpConfig_updateForFile][updateForFile]обновляет конфигурацию плагина 
(считывает дополнительные конфигурационные файлы) для заданного файла.
@entryitem[ITtpConfig_updateForPath][updateForPath]обновляет конфигурацию плагина 
(считывает дополнительные конфигурационные файлы) для заданного каталога.
@entryitem[ITtpConfig_getFileType][getFileType]возвращает строку, содержащую имя типа файла, 
имя которого передается первым аргументом. При ошибке в параметрах или недостаточном размере буера возвращается -1.
Если имф файла не соответствует ни одному из типов, описанных в конфигурационном файле, возвращается 0. 
Если не задан указатель на буфер, возвращается требуемый размер буфера.
@end[entry]


@subsection[ITtpApi][Интерфейс ITtpApi]
Интерфейс @ident[ITtpApi]@hindex[Интерфейс][ITtpApi] предоставляет доступ к API плагина TextTemplates.

@begin[listing*]
%convert CC2X -fITtpApi_ -vgetConfig,matchMaskA % BLOCK_ITtpApi
%insert BLOCK_ITtpApi
@end[listing*]

@begin[entry]
@entryitem[ITtpApi_getConfig][getConfig]возвращает указатель на объект конфигурации плагина (интерфейс
@ident[ITtpConfig]@hindex[Интерфейс][ITtpConfig]). После использования объект следует освободить, вызвав метод @ident[release].
@entryitem[ITtpApi_matchMaskA][matchMaskA]
возвращает @ident[TRUE], если переданное имя соответствует маске, в противном случае (и при ошибке) возвращается @ident[FALSE].
@end[entry]



@subsection[ttpapi_findPlugin][ttpapi::findPlugin]
На листинге @ref[LISTING_ttpapi_findPlugin] приведен код, производящий поиск необходимого 
плагина среди загруженных в процесс Far'а модулей (см. описание в разделе @ref[SEC_TTPAPI]).
@para[]В функции @idxident[findPlugin][Функция] используются используются функции 
@idxident[ToolHelp][API] @ident[API], и она не будет работать в ОС Windows NT 4.


@begin[listing][LISTING_ttpapi_findPlugin][Функции enumTtpapiModules и findPlugin]
%convert CC2X % BLOCK_ttpapi_findPlugin
%insert BLOCK_ttpapi_findPlugin
@end[listing]



@subsection[ttpapi_getFileType][ttpapi::getFileType]
На листинге @ref[LISTING_ttpapi_getFileType] приведен код функции, упрощающей получение типа файла по его имени.


@begin[listing][LISTING_ttpapi_getFileType][Функция getFileType]
%convert CC2X % BLOCK_ttpapi_getFileType
%insert BLOCK_ttpapi_getFileType
@end[listing]







% @subsection[SUBSEC_FEATURE_][]


% @subsection[][]
% @subsection[][]
% @subsection[][]







%if !defined(HELP)
@page_break[] 
@makepictures[]%
@makelistings[]%
% @maketables[]%
@makeindex[]
%endif

@end[article]